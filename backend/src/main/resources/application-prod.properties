# ============================================================
# = SERVER CONFIGURATION
# ============================================================
server.port=8080

# ============================================================
# = DATABASE CONFIGURATION (Railway)
# ============================================================
spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# ============================================================
# = JPA / HIBERNATE CONFIGURATION
# ============================================================
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.jdbc.time_zone=UTC

# ============================================================
# = JWT CONFIGURATION
# ============================================================
jwt.secret=${JWT_SECRET}
# Expiration time: 24 hours (in milliseconds)
jwt.expiration=86400000

# ============================================================
# = MAIL CONFIGURATION
# ============================================================
spring.mail.host=${MAIL_HOST}
spring.mail.port=${MAIL_PORT}
spring.mail.username=${MAIL_USERNAME}
spring.mail.password=${MAIL_PASSWORD}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.writetimeout=5000

# ============================================================
# = AWS S3 CONFIGURATION
# ============================================================
aws.access-key-id=${AWS_ACCESS_KEY_ID}
aws.secret-access-key=${AWS_SECRET_ACCESS_KEY}
aws.region=${AWS_S3_REGION}
aws.s3.bucket=${AWS_S3_BUCKET}

# ============================================================
# = CORS CONFIGURATION
# ============================================================
# ? Fixes your "Could not resolve placeholder 'cors.allowed.origins'" error
cors.allowed.origins=${CORS_ORIGINS}
cors.allowed.methods=GET,POST,PUT,DELETE,OPTIONS
cors.allowed.headers=Authorization,Content-Type
cors.allow.credentials=true

# ============================================================
# = LOGGING CONFIGURATION
# ============================================================
logging.level.org.springframework=INFO
logging.level.com.lms=DEBUG
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n

# ============================================================
# = SPRING APPLICATION CONFIGURATION
# ============================================================
spring.application.name=lms-backend
spring.profiles.active=prod

# ============================================================
# = FILE UPLOAD CONFIGURATION
# ============================================================
spring.servlet.multipart.max-file-size=50MB
spring.servlet.multipart.max-request-size=50MB

# ============================================================
# = SECURITY CONFIGURATION
# ============================================================
spring.main.allow-bean-definition-overriding=true
